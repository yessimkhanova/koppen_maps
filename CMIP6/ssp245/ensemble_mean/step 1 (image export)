/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageCollection = ee.ImageCollection("NASA/GDDP-CMIP6");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
                // THIS STEP 1 OF KOPPEN CLIMATE CLASSIFICATION USING CMIP6 DATA

var path = "FAO/GAUL_SIMPLIFIED_500m/2015/level0"; 
var country_code = 132; // Set the country code for Kazakhstan.
var country = ee.FeatureCollection(path).filter(ee.Filter.eq('ADM0_CODE', country_code)); // Filter the country feature collection for Kazakhstan.

// Specify the Earth Engine Image Collection for CMIP6 data and filter it for the historical scenario
var collection = ee.ImageCollection('NASA/GDDP-CMIP6')
                                    .filter(ee.Filter.eq('scenario', 'ssp245'))
                                    .filterBounds(country);

// List of climate models used in the analysis
var models = [
              'ACCESS-CM2', 
              'ACCESS-ESM1-5', 
              'BCC-CSM2-MR', 
              'CESM2', 
              'CESM2-WACCM', 
              'CMCC-CM2-SR5', 
              'CMCC-ESM2', 
              'CNRM-CM6-1', 
              'CNRM-ESM2-1', 
              'CanESM5', 
              'EC-Earth3', 
              'EC-Earth3-Veg-LR', 
              'FGOALS-g3',
              'GFDL-CM4', 
              'GFDL-ESM4',       // This model exluded from calculations
              'GISS-E2-1-G', 
              'HadGEM3-GC31-LL', 
              // 'HadGEM3-GC31-MM', // This model exluded from calculations, NO DATA
              // 'IITM-ESM',        // This model exluded from calculations, NO DATA FOR 2100
              'INM-CM4-8', 
              'INM-CM5-0', 
              'IPSL-CM6A-LR', 
              'KACE-1-0-G', 
              'KIOST-ESM', 
              'MIROC-ES2L', 
              'MIROC6', 
              'MPI-ESM1-2-HR', 
              'MPI-ESM1-2-LR', 
              'MRI-ESM2-0', 
              'NESM3', 
              'NorESM2-MM', 
              'TaiESM1', 
              'UKESM1-0-LL'
              ];

// Define start and end date for filtering the ImageCollection
var startDate = ee.Date('2015-01-01');
var endDate = ee.Date('2100-12-31');

// Loop over each year from 2015 to 2100
for (var year = 2015; year <= 2100; year++) {
  
  // Define date range for each year
  var dateRange = ee.DateRange(ee.Date(year + '-01-01'), ee.Date(year + '-12-31'));
  
  // Filter the ImageCollection for the current year
  var filteredCollection = collection.filterDate(dateRange);

  // Specify temperature and precipitation bands
  var temperatureBand = 'tas';
  var precipitationBand = 'pr';

  // Define a function to apply the grid label filter conditionally for GFDL-CM4
  function applyModelFilter(monthlyCollection, model) {
    if (model === 'GFDL-CM4') {
      return monthlyCollection
                .filter(ee.Filter.eq('model', model))
                .filterMetadata('grid_label', 'equals', 'gr1');  // Apply grid_label filter for GFDL-CM4
    } else {
      return monthlyCollection.filter(ee.Filter.eq('model', model));  // No grid_label filter for other models
    }
  }

  // Create an ImageCollection of monthly means for temperature and precipitation
  var monthlyMeansCollection = ee.ImageCollection.fromImages(
    ee.List.sequence(year, year).map(function (y) {
      return ee.List.sequence(1, 12).map(function (month) {
        
        // Filter collection by year and month
        var monthlyCollection = filteredCollection
          .filter(ee.Filter.calendarRange(y, y, 'year'))
          .filter(ee.Filter.calendarRange(month, month, 'month'));

        // Calculate mean temperature of models for the month
        var meanTemperature = ee.ImageCollection.fromImages(models.map(function(m) {
          var modelFilteredCollection = applyModelFilter(monthlyCollection, m);  // Apply conditional filter
          return modelFilteredCollection.select(temperatureBand).mean();
        })).mean().subtract(273) // Convert Kelvin to Celsius
          .rename(['meanTemperature']);

        // Calculate sum of precipitation for each model
        var sumPrecipitation = ee.ImageCollection.fromImages(models.map(function(m) {
          var modelFilteredCollection = applyModelFilter(monthlyCollection, m);  // Apply conditional filter
          return modelFilteredCollection.select(precipitationBand)
                                        .sum()
                                        .multiply(1000).multiply(86400).divide(997) // Convert kg m^-2 s^-1 to mm per month
                                        .rename('sumPrecipitation');
        })).mean();

        // Combine mean temperature and mean precipitation for each model
        return meanTemperature.addBands(sumPrecipitation)
                              .set('year', y).set('month', month);
      });
    }).flatten()
  );

  // Create multiband images for temperature
  var temperatureImage = monthlyMeansCollection.select('meanTemperature').toBands().rename(['t1', 't2', 't3', 't4', 't5', 't6', 't7', 't8', 't9', 't10', 't11', 't12']);
  temperatureImage = temperatureImage.set('year', year).clip(country);
  
  // Create multiband images for precipitation
  var precipitationImage = monthlyMeansCollection.select('sumPrecipitation').toBands().rename(['p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7', 'p8', 'p9', 'p10', 'p11', 'p12']);
  precipitationImage = precipitationImage.set('year', year).clip(country);

  // Combine temperature and precipitation bands into a single multiband image
  var multiBandImage = temperatureImage.addBands(precipitationImage);
  multiBandImage = multiBandImage.set('year', year);



  // Export the multiband image for temperature to Earth Engine Assets
  Export.image.toAsset({
    image: temperatureImage,
    description: 't_' + year + '_ssp245' + '_ensemble_mean',
    assetId: 'users/kalamkas/cmip6_ensemble_mean/' + 't_' + year + 'ssp245' + '_ensemble_mean',
    crs: 'EPSG:4326',
    scale: 27830 // Resolution of the source dataset is 27830 meters, so it is set by default
   });
    // Comment: Export temperature image to your Earth Engine Assets.
    // Make sure to change the assetId to your desired location.
    // Example: 'users/your_username/your_asset_folder/temp' + year + '-avgmodels'
    // Exported images will be stored in your asset and will be used in the next step (Step 2).
    
  // Export the multiband image for precipitation to Earth Engine Assets
  Export.image.toAsset({
    image: precipitationImage,
    description: 'pr_' + year + '_ssp245' + '_ensemble_mean',
    assetId: 'users/kalamkas/cmip6_ensemble_mean/' + 'pr_' + year + 'ssp245' + '_ensemble_mean',
    crs: 'EPSG:4326',
    scale: 27830 // Resolution of the source dataset is 27830 meters, so it is set by default
   });
    // Comment: Export precipitation image to your Earth Engine Assets.
    // Make sure to change the assetId to your desired location.
    // Example: 'users/your_username/your_asset_folder/pr' + year + '-avgmodels'
    // Exported images will be stored in your asset and will be used in the next step (Step 2).

}